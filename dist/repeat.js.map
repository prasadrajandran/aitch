{
  "version": 3,
  "sources": ["../src/repeat.ts"],
  "sourcesContent": ["interface HRepeatElementCallbackParams<ITEM> {\n  key: unknown;\n  item: ITEM;\n  index: number;\n}\n\ninterface HRepeatRefCallbackParams<ITEM, ELEMENT extends Element>\n  extends HRepeatElementCallbackParams<ITEM> {\n  element: ELEMENT;\n}\n\ninterface HRepeatKeyCallback<ITEM> {\n  ({ key, item, index }: HRepeatElementCallbackParams<ITEM>): string;\n}\n\ninterface HRepeatElementCallback<ITEM, ELEMENT extends Element> {\n  ({ key, item, index }: HRepeatElementCallbackParams<ITEM>): ELEMENT;\n}\n\ninterface HRepeatRefCallback<ITEM, ELEMENT extends Element> {\n  ({ key, item, index }: HRepeatRefCallbackParams<ITEM, ELEMENT>): void;\n}\n\ninterface HRepeatParams<ITEM, ELEMENT extends Element> {\n  container: HTMLElement;\n  items:\n    | Map<unknown, ITEM>\n    | Set<ITEM>\n    | ITEM[]\n    | Record<string | number | symbol, ITEM>;\n  element: HRepeatElementCallback<ITEM, ELEMENT>;\n  ref?: HRepeatRefCallback<ITEM, ELEMENT>;\n  key?: HRepeatKeyCallback<ITEM>;\n  keyName?: string;\n}\n\n/**\n * Render a collection of Elements.\n */\nexport const repeat = <ITEM, ELEMENT extends Element>({\n  container,\n  items,\n  element: elementCallback,\n  ref,\n  key: keyValueCallback = (args) => String(args.key),\n  keyName = 'data-h-repeat-key',\n}: HRepeatParams<ITEM, ELEMENT>): void => {\n  const entries = Array.isArray(items)\n    ? items.entries()\n    : items instanceof Map\n    ? items\n    : items instanceof Set\n    ? Array.from(items).entries()\n    : Object.entries(items);\n\n  const savedKeys = new Set<string>();\n\n  let index = 0;\n  for (const [key, item] of entries) {\n    const keyValue = String(keyValueCallback({ key, item, index }));\n    savedKeys.add(keyValue);\n\n    let element = container.querySelector<ELEMENT>(\n      `:scope > [${keyName}=\"${keyValue}\"]`\n    );\n\n    if (!element) {\n      element = elementCallback({ key, item, index });\n      element.setAttribute(keyName, keyValue);\n      container.append(element);\n    }\n\n    if (ref && element) {\n      ref({ key, item, index, element });\n    }\n\n    index++;\n  }\n\n  container.querySelectorAll(`:scope > [${keyName}]`).forEach((element) => {\n    if (!savedKeys.has(element.getAttribute(keyName) as string)) {\n      element.remove();\n    }\n  });\n};\n"],
  "mappings": "AAuCO,MAAMA,EAAS,CAAgC,CACpD,UAAAC,EACA,MAAAC,EACA,QAASC,EACT,IAAAC,EACA,IAAKC,EAAoBC,GAAS,OAAOA,EAAK,GAAG,EACjD,QAAAC,EAAU,mBACZ,IAA0C,CACxC,MAAMC,EAAU,MAAM,QAAQN,CAAK,EAC/BA,EAAM,QAAQ,EACdA,aAAiB,IACjBA,EACAA,aAAiB,IACjB,MAAM,KAAKA,CAAK,EAAE,QAAQ,EAC1B,OAAO,QAAQA,CAAK,EAElBO,EAAY,IAAI,IAEtB,IAAIC,EAAQ,EACZ,SAAW,CAACC,EAAKC,CAAI,IAAKJ,EAAS,CACjC,MAAMK,EAAW,OAAOR,EAAiB,CAAE,IAAAM,EAAK,KAAAC,EAAM,MAAAF,CAAM,CAAC,CAAC,EAC9DD,EAAU,IAAII,CAAQ,EAEtB,IAAIC,EAAUb,EAAU,cACtB,aAAaM,MAAYM,KAC3B,EAEKC,IACHA,EAAUX,EAAgB,CAAE,IAAAQ,EAAK,KAAAC,EAAM,MAAAF,CAAM,CAAC,EAC9CI,EAAQ,aAAaP,EAASM,CAAQ,EACtCZ,EAAU,OAAOa,CAAO,GAGtBV,GAAOU,GACTV,EAAI,CAAE,IAAAO,EAAK,KAAAC,EAAM,MAAAF,EAAO,QAAAI,CAAQ,CAAC,EAGnCJ,IAGFT,EAAU,iBAAiB,aAAaM,IAAU,EAAE,QAASO,GAAY,CAClEL,EAAU,IAAIK,EAAQ,aAAaP,CAAO,CAAW,GACxDO,EAAQ,OAAO,CAEnB,CAAC,CACH",
  "names": ["repeat", "container", "items", "elementCallback", "ref", "keyValueCallback", "args", "keyName", "entries", "savedKeys", "index", "key", "item", "keyValue", "element"]
}

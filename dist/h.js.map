{
  "version": 3,
  "sources": ["../src/h.ts"],
  "sourcesContent": ["type ElementHeader = string;\n\ntype AttrNameKebabCase = string;\n\ntype AttrValue = string | number | boolean;\n\ntype DataAttrNameCamelCase = string;\n\ntype EventHandlerName = string;\n\ntype HChildNode = Node | string;\n\ninterface ElementDetails<T extends HTMLElement> {\n  style?: Partial<CSSStyleDeclaration>;\n  class?: string;\n  id?: string;\n  events?: Record<EventHandlerName, (evt: Event) => unknown>;\n  attrs?: Record<AttrNameKebabCase, AttrValue>;\n  dataAttrs?: Record<DataAttrNameCamelCase, AttrValue>;\n  ariaAttrs?: Record<AttrNameKebabCase, AttrValue>;\n  namespaceUri?: string;\n  elementOptions?: ElementCreationOptions;\n  ref?: (el: T) => void;\n}\n\n/**\n * Create an HTML/SVG Element.\n *\n * @param elementHeader Element header definition E.g. 'div',\n *   'div class=\"class\"', etc.\n * @param elementDetails Element details\n * @param nodes Child nodes.\n */\nexport const h = <T extends HTMLElement>(\n  elementHeader: ElementHeader,\n  elementDetails?: ElementDetails<T> | HChildNode,\n  ...nodes: HChildNode[]\n): T => {\n  const {\n    style = {},\n    attrs = {},\n    class: className = undefined,\n    id = '',\n    events = {},\n    dataAttrs = {},\n    ariaAttrs = {},\n    namespaceUri = undefined,\n    elementOptions = undefined,\n    ref = () => {\n      /* Do nothing */\n    },\n  } = elementDetails instanceof Node || typeof elementDetails === 'string'\n    ? {}\n    : elementDetails || {};\n\n  // TODO: either use regex /\\s/ or innerHTML...  RUN trim()?\n  const elementName = elementHeader.split(' ')[0] as string;\n\n  const el: T = namespaceUri\n    ? (document.createElementNS(namespaceUri, elementName, elementOptions) as T)\n    : (document.createElement(elementName, elementOptions) as T);\n\n  const attrParser = document.createElement('div');\n  attrParser.innerHTML = `<${elementHeader}/>`;\n\n  if (attrParser.firstElementChild) {\n    const attrs = attrParser.firstElementChild.attributes;\n    for (let i = 0; i < attrs.length; i++) {\n      const { name, value } = attrs[i] as Attr;\n      el.setAttribute(name, value);\n    }\n  }\n\n  for (const [styleName, styleValue] of Object.entries(style)) {\n    // Note: Do not use \"style.setProperty\" because \"styleName\" is in camelCase.\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    el.style[styleName] = styleValue;\n  }\n\n  if (className) {\n    el.classList.add(...className.split(' '));\n  }\n\n  if (id) {\n    el.setAttribute('id', id);\n  }\n\n  for (const [attrName, attrValue] of Object.entries(attrs)) {\n    el.setAttribute(attrName, String(attrValue));\n  }\n\n  for (const [dataAttrName, dataAttrValue] of Object.entries(dataAttrs)) {\n    el.dataset[dataAttrName] = String(dataAttrValue);\n  }\n\n  for (const [ariaAttrName, ariaAttrValue] of Object.entries(ariaAttrs)) {\n    el.setAttribute(`aria-${ariaAttrName}`, String(ariaAttrValue));\n  }\n\n  for (const [eventName, eventHandler] of Object.entries(events)) {\n    // eslint-disable-next-line\n    // @ts-ignore\n    el[eventName] = eventHandler;\n  }\n\n  if (elementDetails instanceof Node || typeof elementDetails === 'string') {\n    el.append(elementDetails);\n  }\n  el.append(...nodes);\n\n  ref(el);\n\n  return el;\n};\n"],
  "mappings": "AAiCO,MAAMA,EAAI,CACfC,EACAC,KACGC,IACG,CACN,KAAM,CACJ,MAAAC,EAAQ,CAAC,EACT,MAAAC,EAAQ,CAAC,EACT,MAAOC,EAAY,OACnB,GAAAC,EAAK,GACL,OAAAC,EAAS,CAAC,EACV,UAAAC,EAAY,CAAC,EACb,UAAAC,EAAY,CAAC,EACb,aAAAC,EAAe,OACf,eAAAC,EAAiB,OACjB,IAAAC,EAAM,IAAM,CAEZ,CACF,EAAIX,aAA0B,MAAQ,OAAOA,GAAmB,SAC5D,CAAC,EACDA,GAAkB,CAAC,EAGjBY,EAAcb,EAAc,MAAM,GAAG,EAAE,GAEvCc,EAAQJ,EACT,SAAS,gBAAgBA,EAAcG,EAAaF,CAAc,EAClE,SAAS,cAAcE,EAAaF,CAAc,EAEjDI,EAAa,SAAS,cAAc,KAAK,EAG/C,GAFAA,EAAW,UAAY,IAAIf,MAEvBe,EAAW,kBAAmB,CAChC,MAAMX,EAAQW,EAAW,kBAAkB,WAC3C,QAASC,EAAI,EAAGA,EAAIZ,EAAM,OAAQY,IAAK,CACrC,KAAM,CAAE,KAAAC,EAAM,MAAAC,CAAM,EAAId,EAAMY,GAC9BF,EAAG,aAAaG,EAAMC,CAAK,CAC7B,CACF,CAEA,SAAW,CAACC,EAAWC,CAAU,IAAK,OAAO,QAAQjB,CAAK,EAIxDW,EAAG,MAAMK,GAAaC,EAGpBf,GACFS,EAAG,UAAU,IAAI,GAAGT,EAAU,MAAM,GAAG,CAAC,EAGtCC,GACFQ,EAAG,aAAa,KAAMR,CAAE,EAG1B,SAAW,CAACe,EAAUC,CAAS,IAAK,OAAO,QAAQlB,CAAK,EACtDU,EAAG,aAAaO,EAAU,OAAOC,CAAS,CAAC,EAG7C,SAAW,CAACC,EAAcC,CAAa,IAAK,OAAO,QAAQhB,CAAS,EAClEM,EAAG,QAAQS,GAAgB,OAAOC,CAAa,EAGjD,SAAW,CAACC,EAAcC,CAAa,IAAK,OAAO,QAAQjB,CAAS,EAClEK,EAAG,aAAa,QAAQW,IAAgB,OAAOC,CAAa,CAAC,EAG/D,SAAW,CAACC,EAAWC,CAAY,IAAK,OAAO,QAAQrB,CAAM,EAG3DO,EAAGa,GAAaC,EAGlB,OAAI3B,aAA0B,MAAQ,OAAOA,GAAmB,WAC9Da,EAAG,OAAOb,CAAc,EAE1Ba,EAAG,OAAO,GAAGZ,CAAK,EAElBU,EAAIE,CAAE,EAECA,CACT",
  "names": ["h", "elementHeader", "elementDetails", "nodes", "style", "attrs", "className", "id", "events", "dataAttrs", "ariaAttrs", "namespaceUri", "elementOptions", "ref", "elementName", "el", "attrParser", "i", "name", "value", "styleName", "styleValue", "attrName", "attrValue", "dataAttrName", "dataAttrValue", "ariaAttrName", "ariaAttrValue", "eventName", "eventHandler"]
}

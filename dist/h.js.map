{
  "version": 3,
  "sources": ["../src/h.ts"],
  "sourcesContent": ["type ElementHeader = string;\n\ntype AttrNameKebabCase = string;\n\ntype AttrValue = string | number | boolean;\n\ntype DataAttrNameCamelCase = string;\n\ntype EventHandlerName = string;\n\ntype HChildNode = Node | string;\n\ninterface ElementDetails<T extends HTMLElement> {\n  style?: Partial<CSSStyleDeclaration>;\n  class?: string;\n  id?: string;\n  events?: Record<EventHandlerName, (evt: Event) => unknown>;\n  attrs?: Record<AttrNameKebabCase, AttrValue>;\n  dataAttrs?: Record<DataAttrNameCamelCase, AttrValue>;\n  ariaAttrs?: Record<AttrNameKebabCase, AttrValue>;\n  ref?: (element: T) => void;\n}\n\n/**\n * Create an HTML Element.\n *\n * @param elementHeader Element header definition E.g. 'div',\n *   'div class=\"class\"', etc.\n * @param elementDetails Element details\n * @param nodes Child nodes.\n */\nexport const h = <T extends HTMLElement>(\n  elementHeader: ElementHeader,\n  elementDetails?: ElementDetails<T> | HChildNode,\n  ...nodes: HChildNode[]\n): T => {\n  const {\n    style = {},\n    attrs = {},\n    class: className = undefined,\n    id = '',\n    events = {},\n    dataAttrs = {},\n    ariaAttrs = {},\n    ref = () => {\n      /* Do nothing */\n    },\n  } = elementDetails instanceof Node || typeof elementDetails === 'string'\n    ? {}\n    : elementDetails || {};\n\n  const parser = document.createElement('div');\n  parser.innerHTML = `<${elementHeader}/>`;\n  const element = parser.firstElementChild as T;\n\n  if (!element || element instanceof HTMLUnknownElement) {\n    throw new Error(`\"${elementHeader}\" is invalid`);\n  }\n\n  for (const [styleName, styleValue] of Object.entries(style)) {\n    // Note: Do not use \"style.setProperty\" because \"styleName\" is in camelCase.\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    element.style[styleName] = styleValue;\n  }\n\n  if (className) {\n    element.classList.add(...className.split(' '));\n  }\n\n  if (id) {\n    element.setAttribute('id', id);\n  }\n\n  for (const [attrName, attrValue] of Object.entries(attrs)) {\n    element.setAttribute(attrName, String(attrValue));\n  }\n\n  for (const [dataAttrName, dataAttrValue] of Object.entries(dataAttrs)) {\n    element.dataset[dataAttrName] = String(dataAttrValue);\n  }\n\n  for (const [ariaAttrName, ariaAttrValue] of Object.entries(ariaAttrs)) {\n    element.setAttribute(`aria-${ariaAttrName}`, String(ariaAttrValue));\n  }\n\n  for (const [eventName, eventHandler] of Object.entries(events)) {\n    if (eventName in element) {\n      // eslint-disable-next-line\n      // @ts-ignore\n      element[eventName] = eventHandler;\n    } else {\n      throw new Error(`\"${eventName}\" does not exist on \"${element.nodeName}\"`);\n    }\n  }\n\n  if (elementDetails instanceof Node || typeof elementDetails === 'string') {\n    element.append(elementDetails);\n  }\n  element.append(...nodes);\n\n  ref(element);\n\n  return element;\n};\n"],
  "mappings": "AA+BO,MAAMA,EAAI,CACfC,EACAC,KACGC,IACG,CACN,KAAM,CACJ,MAAAC,EAAQ,CAAC,EACT,MAAAC,EAAQ,CAAC,EACT,MAAOC,EAAY,OACnB,GAAAC,EAAK,GACL,OAAAC,EAAS,CAAC,EACV,UAAAC,EAAY,CAAC,EACb,UAAAC,EAAY,CAAC,EACb,IAAAC,EAAM,IAAM,CAEZ,CACF,EAAIT,aAA0B,MAAQ,OAAOA,GAAmB,SAC5D,CAAC,EACDA,GAAkB,CAAC,EAEjBU,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,IAAIX,MACvB,MAAMY,EAAUD,EAAO,kBAEvB,GAAI,CAACC,GAAWA,aAAmB,mBACjC,MAAM,IAAI,MAAM,IAAIZ,eAA2B,EAGjD,SAAW,CAACa,EAAWC,CAAU,IAAK,OAAO,QAAQX,CAAK,EAIxDS,EAAQ,MAAMC,GAAaC,EAGzBT,GACFO,EAAQ,UAAU,IAAI,GAAGP,EAAU,MAAM,GAAG,CAAC,EAG3CC,GACFM,EAAQ,aAAa,KAAMN,CAAE,EAG/B,SAAW,CAACS,EAAUC,CAAS,IAAK,OAAO,QAAQZ,CAAK,EACtDQ,EAAQ,aAAaG,EAAU,OAAOC,CAAS,CAAC,EAGlD,SAAW,CAACC,EAAcC,CAAa,IAAK,OAAO,QAAQV,CAAS,EAClEI,EAAQ,QAAQK,GAAgB,OAAOC,CAAa,EAGtD,SAAW,CAACC,EAAcC,CAAa,IAAK,OAAO,QAAQX,CAAS,EAClEG,EAAQ,aAAa,QAAQO,IAAgB,OAAOC,CAAa,CAAC,EAGpE,SAAW,CAACC,EAAWC,CAAY,IAAK,OAAO,QAAQf,CAAM,EAC3D,GAAIc,KAAaT,EAGfA,EAAQS,GAAaC,MAErB,OAAM,IAAI,MAAM,IAAID,yBAAiCT,EAAQ,WAAW,EAI5E,OAAIX,aAA0B,MAAQ,OAAOA,GAAmB,WAC9DW,EAAQ,OAAOX,CAAc,EAE/BW,EAAQ,OAAO,GAAGV,CAAK,EAEvBQ,EAAIE,CAAO,EAEJA,CACT",
  "names": ["h", "elementHeader", "elementDetails", "nodes", "style", "attrs", "className", "id", "events", "dataAttrs", "ariaAttrs", "ref", "parser", "element", "styleName", "styleValue", "attrName", "attrValue", "dataAttrName", "dataAttrValue", "ariaAttrName", "ariaAttrValue", "eventName", "eventHandler"]
}

{
  "version": 3,
  "sources": ["../src/h-repeat.ts"],
  "sourcesContent": ["interface HRepeatElementCallbackParams<ITEM> {\n  key: string;\n  item: ITEM;\n  index: number;\n}\n\ninterface HRepeatRefCallbackParams<ITEM, ELEMENT>\n  extends HRepeatElementCallbackParams<ITEM> {\n  element: ELEMENT;\n}\n\ninterface HRepeatKeyCallback<ITEM> {\n  ({ key, item, index }: HRepeatElementCallbackParams<ITEM>): string;\n}\n\ninterface HRepeatElementCallback<ITEM, ELEMENT> {\n  ({ key, item, index }: HRepeatElementCallbackParams<ITEM>): ELEMENT;\n}\n\ninterface HRepeatRefCallback<ITEM, ELEMENT> {\n  ({ key, item, index }: HRepeatRefCallbackParams<ITEM, ELEMENT>): void;\n}\n\ninterface HRepeatOptions<ITEM> {\n  key?: HRepeatKeyCallback<ITEM>;\n  reset?: boolean;\n  idAttrName?: string; // TODO: change to \"keyAttrName\"\n}\n\ninterface HRepeatParams<ITEM, ELEMENT extends HTMLElement> {\n  container: HTMLElement;\n  items: unknown;\n  element: HRepeatElementCallback<ITEM, ELEMENT>;\n  ref?: HRepeatRefCallback<ITEM, ELEMENT>;\n  opts?: HRepeatOptions<ITEM>;\n}\n\n/**\n * Render a collection of nodes.\n */\nexport const hRepeat = <ITEM, ELEMENT extends HTMLElement>({\n  container,\n  items,\n  element: elementCallback,\n  ref,\n  opts: { key, reset, idAttrName } = {},\n}: HRepeatParams<ITEM, ELEMENT>) => {\n  const keyAttrName = idAttrName || `data-h-repeat-id`; // TODO: change to data-h-repeat-key ?\n\n  const getItems = (items: unknown) => {\n    if (items instanceof Map || items instanceof Set) {\n      return items;\n    }\n    return Object.entries(items as Record<string, unknown>);\n  };\n\n  const getKeyValue = key || (({ key }: { key: string }) => key);\n\n  const keyValues = new Set();\n\n  let index = 0;\n  for (const [key, item] of getItems(items)) {\n    const keyValue = getKeyValue({ key, item, index });\n    keyValues.add(keyValue);\n\n    let element = container.querySelector<ELEMENT>(\n      `[${keyAttrName}=\"${keyValue}\"]`\n    );\n    if (!reset && !element) {\n      element = elementCallback({ key, item, index });\n      element.setAttribute(keyAttrName, keyValue);\n      container.append(element);\n    }\n\n    if (ref && element) {\n      ref({ key, item, index, element });\n    }\n\n    index++;\n  }\n\n  container.querySelectorAll(`[${keyAttrName}]`).forEach((element) => {\n    if (!keyValues.has(element.getAttribute(keyAttrName))) {\n      element.remove();\n    }\n  });\n};\n"],
  "mappings": "AAwCO,MAAMA,EAAU,CAAoC,CACzD,UAAAC,EACA,MAAAC,EACA,QAASC,EACT,IAAAC,EACA,KAAM,CAAE,IAAAC,EAAK,MAAAC,EAAO,WAAAC,CAAW,EAAI,CAAC,CACtC,IAAoC,CAClC,MAAMC,EAAcD,GAAc,mBAE5BE,EAAYP,GACZA,aAAiB,KAAOA,aAAiB,IACpCA,EAEF,OAAO,QAAQA,CAAgC,EAGlDQ,EAAcL,IAAQ,CAAC,CAAE,IAAAA,CAAI,IAAuBA,GAEpDM,EAAY,IAAI,IAEtB,IAAIC,EAAQ,EACZ,SAAW,CAACP,EAAKQ,CAAI,IAAKJ,EAASP,CAAK,EAAG,CACzC,MAAMY,EAAWJ,EAAY,CAAE,IAAAL,EAAK,KAAAQ,EAAM,MAAAD,CAAM,CAAC,EACjDD,EAAU,IAAIG,CAAQ,EAEtB,IAAIC,EAAUd,EAAU,cACtB,IAAIO,MAAgBM,KACtB,EACI,CAACR,GAAS,CAACS,IACbA,EAAUZ,EAAgB,CAAE,IAAAE,EAAK,KAAAQ,EAAM,MAAAD,CAAM,CAAC,EAC9CG,EAAQ,aAAaP,EAAaM,CAAQ,EAC1Cb,EAAU,OAAOc,CAAO,GAGtBX,GAAOW,GACTX,EAAI,CAAE,IAAAC,EAAK,KAAAQ,EAAM,MAAAD,EAAO,QAAAG,CAAQ,CAAC,EAGnCH,GACF,CAEAX,EAAU,iBAAiB,IAAIO,IAAc,EAAE,QAASO,GAAY,CAC7DJ,EAAU,IAAII,EAAQ,aAAaP,CAAW,CAAC,GAClDO,EAAQ,OAAO,CAEnB,CAAC,CACH",
  "names": ["hRepeat", "container", "items", "elementCallback", "ref", "key", "reset", "idAttrName", "keyAttrName", "getItems", "getKeyValue", "keyValues", "index", "item", "keyValue", "element"]
}

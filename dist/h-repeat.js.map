{
  "version": 3,
  "sources": ["../src/h-repeat.ts"],
  "sourcesContent": ["interface HRepeatElementCallbackParams<ITEM> {\n  key: string;\n  item: ITEM;\n  index: number;\n}\n\ninterface HRepeatRefCallbackParams<ITEM, ELEMENT>\n  extends HRepeatElementCallbackParams<ITEM> {\n  element: ELEMENT;\n}\n\ninterface HRepeatKeyCallback<ITEM> {\n  ({ key, item, index }: HRepeatElementCallbackParams<ITEM>): string;\n}\n\ninterface HRepeatElementCallback<ITEM, ELEMENT> {\n  ({ key, item, index }: HRepeatElementCallbackParams<ITEM>): ELEMENT;\n}\n\ninterface HRepeatRefCallback<ITEM, ELEMENT> {\n  ({ key, item, index }: HRepeatRefCallbackParams<ITEM, ELEMENT>): void;\n}\n\ninterface HRepeatOptions<ITEM> {\n  key?: HRepeatKeyCallback<ITEM>;\n  keyAttrName?: string;\n}\n\ninterface HRepeatParams<ITEM, ELEMENT extends HTMLElement> {\n  container: HTMLElement;\n  items: unknown;\n  element: HRepeatElementCallback<ITEM, ELEMENT>;\n  ref?: HRepeatRefCallback<ITEM, ELEMENT>;\n  opts?: HRepeatOptions<ITEM>;\n}\n\n/**\n * Render a collection of nodes.\n */\nexport const hRepeat = <ITEM, ELEMENT extends HTMLElement>({\n  container,\n  items,\n  element: elementCallback,\n  ref,\n  opts = {},\n}: HRepeatParams<ITEM, ELEMENT>) => {\n  const keyAttrName = opts.keyAttrName || `data-h-repeat-key`;\n\n  const getItems = (items: unknown) => {\n    if (items instanceof Map || items instanceof Set) {\n      return items;\n    }\n    return Object.entries(items as Record<string, unknown>);\n  };\n\n  const getKeyValue = opts.key || (({ key }: { key: string }) => key);\n\n  const keyValues = new Set();\n\n  let index = 0;\n  for (const [key, item] of getItems(items)) {\n    const keyValue = getKeyValue({ key, item, index });\n    keyValues.add(keyValue);\n\n    let element = container.querySelector<ELEMENT>(\n      `[${keyAttrName}=\"${keyValue}\"]`\n    );\n    if (!element) {\n      element = elementCallback({ key, item, index });\n      element.setAttribute(keyAttrName, keyValue);\n      container.append(element);\n    }\n\n    if (ref && element) {\n      ref({ key, item, index, element });\n    }\n\n    index++;\n  }\n\n  container.querySelectorAll(`[${keyAttrName}]`).forEach((element) => {\n    if (!keyValues.has(element.getAttribute(keyAttrName))) {\n      element.remove();\n    }\n  });\n};\n"],
  "mappings": "AAuCO,MAAMA,EAAU,CAAoC,CACzD,UAAAC,EACA,MAAAC,EACA,QAASC,EACT,IAAAC,EACA,KAAAC,EAAO,CAAC,CACV,IAAoC,CAClC,MAAMC,EAAcD,EAAK,aAAe,oBAElCE,EAAYL,GACZA,aAAiB,KAAOA,aAAiB,IACpCA,EAEF,OAAO,QAAQA,CAAgC,EAGlDM,EAAcH,EAAK,MAAQ,CAAC,CAAE,IAAAI,CAAI,IAAuBA,GAEzDC,EAAY,IAAI,IAEtB,IAAIC,EAAQ,EACZ,SAAW,CAACF,EAAKG,CAAI,IAAKL,EAASL,CAAK,EAAG,CACzC,MAAMW,EAAWL,EAAY,CAAE,IAAAC,EAAK,KAAAG,EAAM,MAAAD,CAAM,CAAC,EACjDD,EAAU,IAAIG,CAAQ,EAEtB,IAAIC,EAAUb,EAAU,cACtB,IAAIK,MAAgBO,KACtB,EACKC,IACHA,EAAUX,EAAgB,CAAE,IAAAM,EAAK,KAAAG,EAAM,MAAAD,CAAM,CAAC,EAC9CG,EAAQ,aAAaR,EAAaO,CAAQ,EAC1CZ,EAAU,OAAOa,CAAO,GAGtBV,GAAOU,GACTV,EAAI,CAAE,IAAAK,EAAK,KAAAG,EAAM,MAAAD,EAAO,QAAAG,CAAQ,CAAC,EAGnCH,GACF,CAEAV,EAAU,iBAAiB,IAAIK,IAAc,EAAE,QAASQ,GAAY,CAC7DJ,EAAU,IAAII,EAAQ,aAAaR,CAAW,CAAC,GAClDQ,EAAQ,OAAO,CAEnB,CAAC,CACH",
  "names": ["hRepeat", "container", "items", "elementCallback", "ref", "opts", "keyAttrName", "getItems", "getKeyValue", "key", "keyValues", "index", "item", "keyValue", "element"]
}
